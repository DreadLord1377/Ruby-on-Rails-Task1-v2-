---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/":
    get:
      summary: list articles (first 10)
      tags:
      - article
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
  "/?page={page}":
    get:
      summary: list only necessary articles
      tags:
      - article
      parameters:
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
  "/?page={page}&per_page={per_page}":
    get:
      summary: list only necessary articles
      tags:
      - article
      parameters:
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: per_page
        in: path
        example: 10
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
  "/articles":
    get:
      summary: list articles (first 10)
      tags:
      - article
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
    post:
      summary: create article
      tags:
      - article
      parameters: []
      responses:
        '201':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show"
        '422':
          description: Invalid request (Can not parse given data)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Title example
                body:
                  type: string
                  example: Text example
                status:
                  type: string
                  example: public
        required: true
  "/articles/?page={page}":
    get:
      summary: list only necessary articles
      tags:
      - article
      parameters:
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
  "/articles/?page={page}&per_page={per_page}":
    get:
      summary: list only necessary articles
      tags:
      - article
      parameters:
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: per_page
        in: path
        example: 10
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show_list"
  "/articles/{id}":
    get:
      summary: show article
      tags:
      - article
      parameters:
      - name: id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show"
        '404':
          description: Invalid request (Id not found)
    patch:
      summary: update article
      tags:
      - article
      parameters:
      - name: id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/article_show"
        '404':
          description: Invalid request (Id not found)
        '422':
          description: Invalid request (Can not parse given data)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Title example update
                body:
                  type: string
                  example: Text example update
                status:
                  type: string
                  example: private
    delete:
      summary: delete article
      tags:
      - article
      parameters:
      - name: id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Successful request
        '404':
          description: Invalid request (Id not found)
  "/articles/{article_id}/comments":
    get:
      summary: list comments (first 10)
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/comment_list"
    post:
      summary: create comment
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/comment"
        '404':
          description: Invalid request (Article id not found)
        '422':
          description: Invalid request (Can not parse given data)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commenter:
                  type: string
                  example: Commenter example
                body:
                  type: string
                  example: Text example
                status:
                  type: string
                  example: public
        required: true
  "/articles/{article_id}/comments?page={page}":
    get:
      summary: list only necessary comments
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/comment_list"
  "/articles/{article_id}/comments?page={page}&per_page={per_page}":
    get:
      summary: list only necessary comments
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: page
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: per_page
        in: path
        example: 10
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/comment_list"
  "/articles/{article_id}/comments/{id}":
    patch:
      summary: update comment
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful request
          content:
            application/json:
              schema:
                "$ref": "#components/schemas/comment"
        '404':
          description: Invalid request (Comment id not found)
        '422':
          description: Invalid request (Can not parse given data)
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                commenter:
                  type: string
                  example: Commenter example update
                body:
                  type: string
                  example: Text example update
                status:
                  type: string
                  example: private
    delete:
      summary: delete comment
      tags:
      - comment
      parameters:
      - name: article_id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      - name: id
        in: path
        example: 1
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: Successful request
        '404':
          description: Invalid request (Comment id not found)
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: 127.0.0.1:3000
components:
  schemas:
    article_preview:
      type: object
      properties:
        id:
          type: integer
          example: '1'
        title:
          type: string
          example: Article Title
        body:
          type: string
          example: Article text
        created_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        updated_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        status:
          type: string
          example: public
      required:
      - title
      - body
      - status
      additionalProperties: false
    article_show:
      type: object
      properties:
        id:
          type: integer
          example: '1'
        title:
          type: string
          example: Article Title
        body:
          type: string
          example: Article text
        created_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        updated_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        status:
          type: string
          example: public
        comments:
          type: array
          items:
            "$ref": "#components/schemas/comment"
      required:
      - title
      - body
      - status
      additionalProperties: false
    article_show_list:
      type: array
      items:
        "$ref": "#components/schemas/article_show"
    comment:
      type: object
      properties:
        id:
          type: integer
          example: '1'
        commenter:
          type: string
          example: Commenter
        body:
          type: string
          example: Comment text
        article_id:
          type: integer
          example: '1'
        created_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        updated_at:
          type: string
          example: '2024-12-03T12:47:49.796Z'
        status:
          type: string
          example: public
      required:
      - commenter
      - body
      - article_id
      - status
      additionalProperties: false
    comment_list:
      type: array
      items:
        "$ref": "#components/schemas/comment"
    error:
      type: object
      properties:
        error:
          type: string
        details:
          type: array
          items:
            type: string
      required:
      - error
      - details
      additionalProperties: false
    errors:
      type: array
      items:
        "$ref": "#components/schemas/error"
